/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  PatchTasksIdMutationRequest,
  PatchTasksIdMutationResponse,
  PatchTasksIdPathParams,
  PatchTasksId404,
} from '../../../api/src/gen/types/PatchTasksId.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const patchTasksIdMutationKey = () => [{ url: '/tasks/{id}' }] as const

export type PatchTasksIdMutationKey = ReturnType<typeof patchTasksIdMutationKey>

/**
 * @description Atualiza uma tarefa existente
 * {@link /tasks/:id}
 */
export async function patchTasksId(
  id: PatchTasksIdPathParams['id'],
  data?: PatchTasksIdMutationRequest,
  config: Partial<RequestConfig<PatchTasksIdMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PatchTasksIdMutationResponse, ResponseErrorConfig<PatchTasksId404>, PatchTasksIdMutationRequest>({
    method: 'PATCH',
    url: `/tasks/${id}`,
    baseURL: 'http://localhost:3001',
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @description Atualiza uma tarefa existente
 * {@link /tasks/:id}
 */
export function usePatchTasksId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PatchTasksIdMutationResponse>,
      ResponseErrorConfig<PatchTasksId404>,
      { id: PatchTasksIdPathParams['id']; data?: PatchTasksIdMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PatchTasksIdMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? patchTasksIdMutationKey()

  return useMutation<
    ResponseConfig<PatchTasksIdMutationResponse>,
    ResponseErrorConfig<PatchTasksId404>,
    { id: PatchTasksIdPathParams['id']; data?: PatchTasksIdMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return patchTasksId(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}